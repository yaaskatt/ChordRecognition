resample = SMOTE()
    x = x.reshape(x.shape[0], x.shape[1])

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
    x_train = x_train.reshape(x_train.shape[0], x_train.shape[1])

    x_train = x[0:300]
    y_train = y[0:300]

    #x_train, y_train = resample.fit_resample(x_train, y_train)
    #x_train = np.array(np.split(x_train.T, len(x_train), axis=1))
    x_train = np.expand_dims(x_train.reshape(x_train.shape[0], x_train.shape[1], 1, 1), axis=0)
    y_train = np.expand_dims(y_train.reshape(y_train.shape[0]*y_train.shape[1]), axis=0)
    x_test = np.expand_dims(x_test.reshape(x_test.shape[0], x_test.shape[1], 1, 1), axis=0)
    y_test = np.expand_dims(y_test.reshape(y_test.shape[0]*y_test.shape[1]), axis=0)
    input_shape = (x_train.shape[1:])

    model = Sequential()
    model.add(TimeDistributed(Conv2D(64, kernel_size=3, activation='relu', padding='same'),
                              input_shape=(x_train.shape[1], x_train.shape[2], x_train.shape[3], x_train.shape[4])))
    model.add(TimeDistributed(Dropout(0.3)))
    model.add(TimeDistributed(Conv2D(96, kernel_size=3, activation='relu', padding='same', strides=(1, 1))))
    model.add(TimeDistributed(Dropout(0.5)))
    model.add(TimeDistributed(Flatten()))
    model.add(TimeDistributed(Dense(1024, activation="relu")))
    model.add(Dropout(0.3))

    model.add(LSTM(256, return_sequences=False, dropout=0.5))
    model.add(Dense(y_train.shape[1], activation='softmax'))